{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _ListView from \"antd-mobile/lib/list-view\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { observable, action, computed } from 'mobx';\n\nvar getSectionData = function getSectionData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n};\n\nvar getRowData = function getRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[rowID];\n};\n\nvar ListStore =\n/*#__PURE__*/\nfunction () {\n  function ListStore(requestMethod, initParams, processItem, index) {\n    _classCallCheck(this, ListStore);\n\n    this.ps = 10;\n    this.requestMethod = requestMethod;\n\n    if (initParams) {\n      this.initParams = initParams;\n    } else {\n      this.initParams = {};\n    }\n\n    this.pathParams = [];\n    this.ps = 10;\n\n    if (this.initParams.ps) {\n      this.ps = this.initParams.ps;\n    }\n\n    this.processItem = processItem;\n    this.index = index || '';\n    this.pagination = {\n      nt: null,\n      pt: null,\n      totalCount: 0\n    };\n    this.itemList = [];\n    this.itemMap = {};\n    this.dataSource = new _ListView.DataSource({\n      rowHasChanged: function rowHasChanged(row1, row2) {\n        return row1 !== row2;\n      }\n    });\n  }\n\n  _createClass(ListStore, [{\n    key: \"setPathParams\",\n    value: function setPathParams(params) {\n      if (params && params.length) {\n        this.pathParams = params;\n      }\n    }\n  }, {\n    key: \"requestData\",\n    value: function requestData(params) {\n      var _this = this;\n\n      if (this.isLoading) {\n        return;\n      }\n\n      this.isLoading = true;\n      this.isRefreshing = true;\n      var itemMap = this.itemMap;\n      params = this._beforeRefreshData(_objectSpread({}, this.initParams, params));\n      return this.requestMethod.apply(this, [].concat(_toConsumableArray(this.pathParams), [params])).then(function (data) {\n        _this._afterLoadMoreData(data);\n\n        data.list.forEach(function (item) {\n          _this.processItem && _this.processItem(item);\n          itemMap[item.id] = item;\n        });\n        _this.itemList = data.list;\n        _this.itemMap = itemMap;\n        _this.dataSource = _this.dataSource.cloneWithRows(_this.itemList.slice());\n      }).catch(function () {}).finally(function () {\n        _this.isLoading = false;\n        _this.isRefreshing = false;\n      });\n    }\n  }, {\n    key: \"loadMoreData\",\n    value: function loadMoreData(params) {\n      var _this2 = this;\n\n      if (this.isLoading) {\n        return;\n      }\n\n      this.isLoading = true;\n      var itemMap = this.itemMap;\n      params = this._beforeLoadMoreData(_objectSpread({}, this.initParams, params));\n\n      if (!params) {\n        return;\n      }\n\n      return this.requestMethod.apply(this, [].concat(_toConsumableArray(this.pathParams), [params])).then(function (data) {\n        _this2._afterLoadMoreData(data);\n\n        data.list.forEach(function (item) {\n          _this2.processItem && _this2.processItem(item);\n          itemMap[item.id] = item;\n        });\n        _this2.itemList = _this2.itemList.concat(data.list);\n        _this2.itemMap = itemMap;\n        _this2.dataSource = _this2.dataSource.cloneWithRows(_this2.itemList.slice());\n      }).catch(function () {}).finally(function () {\n        _this2.isLoading = false;\n      });\n    }\n  }, {\n    key: \"_beforeRefreshData\",\n    value: function _beforeRefreshData(params) {\n      params || (params = {});\n      params.ps = this.ps;\n      return params;\n    }\n  }, {\n    key: \"_beforeLoadMoreData\",\n    value: function _beforeLoadMoreData(params) {\n      if (this.noMore) {\n        return false;\n      }\n\n      params || (params = {});\n      params.ps = this.ps;\n\n      if (this.pagination.nt) {\n        params.nt = this.pagination.nt;\n      }\n\n      if (this.pagination.pn) {\n        params.pn = this.pagination.pn;\n      }\n\n      var pagination = _objectSpread({}, this.pagination);\n\n      this.pagination = pagination;\n      return params;\n    }\n  }, {\n    key: \"_afterLoadMoreData\",\n    value: function _afterLoadMoreData(data) {\n      if (data.list && data.list.length < this.ps) {\n        this.noMore = true;\n      }\n\n      if (data.page_list && data.page_list.length < this.ps) {\n        this.noMore = true;\n      }\n\n      var pagination = {};\n\n      if (data.count) {\n        pagination.totalCount = data.count;\n      }\n\n      if (data.nt) {\n        pagination.nt = data.nt;\n      }\n\n      if (data.pageNum !== null && data.pageNum !== undefined) {\n        pagination.pn = Number(data.pageNum) + 1;\n      }\n\n      this.pagination = pagination;\n    }\n  }]);\n\n  return ListStore;\n}();\n\nexport { ListStore as default };\n;","map":{"version":3,"sources":["/Users/lotuslwb/Documents/MJobs/orangeLove/stores/ListStore.js"],"names":["observable","action","computed","getSectionData","dataBlob","sectionID","getRowData","rowID","ListStore","requestMethod","initParams","processItem","index","ps","pathParams","pagination","nt","pt","totalCount","itemList","itemMap","dataSource","DataSource","rowHasChanged","row1","row2","params","length","isLoading","isRefreshing","_beforeRefreshData","apply","then","data","_afterLoadMoreData","list","forEach","item","id","cloneWithRows","slice","catch","finally","_beforeLoadMoreData","concat","noMore","pn","page_list","count","pageNum","undefined","Number"],"mappings":"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","sourcesContent":["import {observable, action, computed} from 'mobx';\nimport {ListView} from 'antd-mobile';\n\nconst getSectionData = (dataBlob, sectionID) => dataBlob[sectionID];\nconst getRowData = (dataBlob, sectionID, rowID) => dataBlob[rowID];\n\nexport default class ListStore {\n\n    @observable isLoading = false;\n    @observable isRefreshing = false;\n    @observable noMore = false;\n    @observable pageList = [];\n    @observable pageMap = {};\n    @observable pagination = {};\n    @observable dataSource = new ListView.DataSource({\n        rowHasChanged: (row1, row2) => row1 !== row2,\n    });\n    ps = 10;\n\n    constructor(requestMethod, initParams, processItem, index) {\n        this.requestMethod = requestMethod;\n        if (initParams) {\n            this.initParams = initParams;\n        } else {\n            this.initParams = {};\n        }\n        this.pathParams = [];\n        this.ps = 10;\n        if (this.initParams.ps) {\n            this.ps = this.initParams.ps;\n        }\n        this.processItem = processItem;\n        this.index = index || '';\n\n        this.pagination = {\n            nt: null,\n            pt: null,\n            totalCount: 0,\n        };\n        this.itemList = [];\n        this.itemMap = {};\n        this.dataSource = new ListView.DataSource({\n            rowHasChanged: (row1, row2) => row1 !== row2,\n        });\n    }\n\n    setPathParams(params) {\n        if (params && params.length) {\n            this.pathParams = params;\n        }\n    }\n\n    requestData(params) {\n        if (this.isLoading) {\n            return;\n        }\n        this.isLoading = true;\n        this.isRefreshing = true;\n        const {itemMap} = this;\n        params = this._beforeRefreshData({\n            ...this.initParams,\n            ...params,\n        });\n        return this.requestMethod.apply(this, [...this.pathParams, params])\n            .then(data => {\n                this._afterLoadMoreData(data);\n                data.list.forEach((item) => {\n                    this.processItem && this.processItem(item);\n                    itemMap[item.id] = item;\n                });\n                this.itemList = data.list;\n                this.itemMap = itemMap;\n                this.dataSource = this.dataSource.cloneWithRows(this.itemList.slice());\n            })\n            .catch(() => {\n            })\n            .finally(() => {\n                this.isLoading = false;\n                this.isRefreshing = false;\n            });\n    }\n\n    loadMoreData(params) {\n        if (this.isLoading) {\n            return;\n        }\n        this.isLoading = true;\n        const {itemMap} = this;\n        params = this._beforeLoadMoreData({\n            ...this.initParams,\n            ...params,\n        });\n        if (!params) {\n            return;\n        }\n        return this.requestMethod.apply(this, [...this.pathParams, params])\n            .then(data => {\n                this._afterLoadMoreData(data);\n                data.list.forEach((item) => {\n                    this.processItem && this.processItem(item);\n                    itemMap[item.id] = item;\n                });\n                this.itemList = this.itemList.concat(data.list);\n                this.itemMap = itemMap;\n                this.dataSource = this.dataSource.cloneWithRows(this.itemList.slice());\n            })\n            .catch(() => {\n            })\n            .finally(() => {\n                this.isLoading = false;\n            });\n    }\n\n    _beforeRefreshData(params) {\n        params || (params = {});\n        params.ps = this.ps;\n        return params;\n    }\n\n    _beforeLoadMoreData(params) {\n        if (this.noMore) {\n            return false;\n        }\n        params || (params = {});\n        params.ps = this.ps;\n        if (this.pagination.nt) {\n            params.nt = this.pagination.nt;\n        }\n        if (this.pagination.pn) {\n            params.pn = this.pagination.pn;\n        }\n        const pagination = {\n            ...this.pagination,\n        };\n        this.pagination = pagination;\n        return params;\n    };\n\n    _afterLoadMoreData(data) {\n        if (data.list && data.list.length < this.ps) {\n            this.noMore = true;\n        }\n        if (data.page_list && data.page_list.length < this.ps) {\n            this.noMore = true;\n        }\n        const pagination = {};\n        if (data.count) {\n            pagination.totalCount = data.count;\n        }\n        if (data.nt) {\n            pagination.nt = data.nt;\n        }\n        if (data.pageNum !== null && data.pageNum !== undefined) {\n            pagination.pn = Number(data.pageNum) + 1;\n        }\n        this.pagination = pagination;\n    };\n\n};"]},"metadata":{},"sourceType":"module"}